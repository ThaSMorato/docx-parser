name: NPM Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

      - name: Run linter
        run: pnpm lint

  version-and-publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: version-bump
        run: |
          # Get commits since last tag or all commits if no tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"%s")
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"

          # Determine bump type based on commit messages
          BUMP_TYPE="patch"

          # Check for MAJOR commits
          if echo "$COMMITS" | grep -qi "^MAJOR:"; then
            BUMP_TYPE="major"
            echo "Found MAJOR commit - will bump major version"
          # Check for MINOR commits
          elif echo "$COMMITS" | grep -qi "^MINOR:"; then
            BUMP_TYPE="minor"
            echo "Found MINOR commit - will bump minor version"
          # Check for breaking changes
          elif echo "$COMMITS" | grep -qi "BREAKING CHANGE"; then
            BUMP_TYPE="major"
            echo "Found BREAKING CHANGE - will bump major version"
          # Check for features
          elif echo "$COMMITS" | grep -qi "^feat\|^feature"; then
            BUMP_TYPE="minor"
            echo "Found feature commit - will bump minor version"
          else
            echo "No major/minor changes found - will bump patch version"
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version
        id: bump-version
        run: |
          BUMP_TYPE=${{ steps.version-bump.outputs.bump_type }}
          echo "Bumping $BUMP_TYPE version..."

          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package.json and create tag
        run: |
          NEW_VERSION=${{ steps.bump-version.outputs.new_version }}

          # Commit version bump
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"

          # Create and push tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin main
          git push origin "$NEW_VERSION"

      - name: Build package
        run: npm run build

      - name: Create Release Notes
        id: release-notes
        run: |
          NEW_VERSION=${{ steps.bump-version.outputs.new_version }}
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD~1)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD~1 --oneline --pretty=format:"- %s")
          fi

          cat > release-notes.md << EOF
          # Release $NEW_VERSION

          ## Changes
          $COMMITS

          ## Installation
          \`\`\`bash
          npm install @thasmorato/docx-parser@$NEW_VERSION
          \`\`\`
          EOF

          echo "Release notes created"

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump-version.outputs.new_version }}
          release_name: Release ${{ steps.bump-version.outputs.new_version }}
          body_path: ./release-notes.md
          draft: false
          prerelease: false

      - name: Notify success
        run: |
          echo "✅ Successfully published ${{ steps.bump-version.outputs.new_version }} to NPM!"
          echo "📦 Package: https://www.npmjs.com/package/@thasmorato/docx-parser"
          echo "🏷️ Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.bump-version.outputs.new_version }}"
